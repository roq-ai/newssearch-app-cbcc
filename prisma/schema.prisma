generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model educational_resource {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar(255)
  content     String   @db.VarChar(255)
  source_link String   @db.VarChar(255)
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model fact_check {
  id                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String     @db.VarChar(255)
  summary            String     @db.VarChar(255)
  source_link        String     @db.VarChar(255)
  source_credibility Int
  user_id            String     @db.Uuid
  created_at         DateTime   @default(now()) @db.Timestamp(6)
  updated_at         DateTime   @default(now()) @db.Timestamp(6)
  user               user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  feedback           feedback[]
}

model feedback {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content       String     @db.VarChar(255)
  user_id       String     @db.Uuid
  fact_check_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  fact_check    fact_check @relation(fields: [fact_check_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model search_history {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keywords           String   @db.VarChar(255)
  date               DateTime @default(now()) @db.Timestamp(6)
  region             String   @db.VarChar(255)
  source_credibility Int
  user_id            String   @db.Uuid
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(now()) @db.Timestamp(6)
  user               user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String                 @unique @db.VarChar(255)
  firstName            String?                @db.VarChar(255)
  lastName             String?                @db.VarChar(255)
  roq_user_id          String                 @db.VarChar(255)
  tenant_id            String                 @db.VarChar(255)
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  company              company[]
  educational_resource educational_resource[]
  fact_check           fact_check[]
  feedback             feedback[]
  search_history       search_history[]
}
